---
- name: Check system distribution
  hosts: all
  user: "{{ uservar }}"
  sudo: true
  tasks: 
    - name: Group systems by distribution (e.g. Debian, Ubuntu or RedHat)
      action: group_by key={{ ansible_os_family }}
      changed_when: no 

- name: Stop services on Ubuntu servers
  hosts: all
  gather_facts: false
  user: "{{ uservar }}"
  sudo: true
  tasks:
      - name: Stopping Services --  Please wait
        service: name=jenkins state=stopped
        register: update
      - name: Group systems that updated
        action: group_by key=update_{{ update.changed }}
        changed_when: no 

- name: Reboot the updated systems
  hosts: update_True
  gather_facts: false
  user: "{{ uservar }}"
  sudo: true
  tasks:
      - name: Performing reboot
        command: /sbin/shutdown -r now "REASON -- Security Patch Management"

- name: validate the server comes back online
  hosts: update_True
  gather_facts: false
  user: "{{ uservar }}"
  tasks:
      - name: Waiting for system(s) to go down
        wait_for: host={{ inventory_hostname }} port=22 state=stopped timeout=360
        connection: local
        sudo: false

      - name: Waiting for system(s) to come back up
        wait_for: host={{inventory_hostname }} port=22 state=started delay=30 timeout=360
        connection: local
        sudo: false

      - name: Test if services are up
        action: service name=jenkins state=started
        sudo: true

- name: Calls stop-tomcat script
  hosts: all
  gather_facts: false
  user: "{{ uservar }}"
  sudo: true
  tasks:
      - name: Stopping Services --  Please wait
        service: name=jenkins state=stopped

- name: Call patch update script
  hosts: update_True
  gather_facts: false
  user: "{{ uservar }}"
  tasks:
      - name: Group systems that updated
        action: group_by key=update_{{ update.changed }}

- name: Calls start-tomcat script
  hosts: all
  gather_facts: false
  user: "{{ uservar }}"
  sudo: true
  tasks:
      - name: Starting Services --  Please wait
        service: name=jenkins state=started
        
- name: Example playbook sending mail to root
  hosts: 127.0.0.1
  gather_facts: false
  user: "{{ uservar }}"
  sudo: true
  tasks:
      - local_action: mail msg='System {{ inventory_hostname }} has been successfully provisioned.'

                host='127.0.0.1'
                port=2025
                subject="Ansible test mail"
                body="Testing email"
                from="srikanth.challa@bestbuy.com"
                to="srikanth.challa@bestbuy.com"
                charset=utf8
